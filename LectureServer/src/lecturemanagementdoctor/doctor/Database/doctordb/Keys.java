/*
 * This file is generated by jOOQ.
 */
package lecturemanagementdoctor.doctor.Database.doctordb;


import javax.annotation.Generated;

import lecturemanagementdoctor.doctor.Database.doctordb.tables.Doctor;
import lecturemanagementdoctor.doctor.Database.doctordb.tables.records.DoctorRecord;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>doctordb</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<DoctorRecord, Integer> IDENTITY_DOCTOR = Identities0.IDENTITY_DOCTOR;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DoctorRecord> KEY_DOCTOR_PRIMARY = UniqueKeys0.KEY_DOCTOR_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<DoctorRecord, Integer> IDENTITY_DOCTOR = Internal.createIdentity(Doctor.DOCTOR, Doctor.DOCTOR.DOCTOR_ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<DoctorRecord> KEY_DOCTOR_PRIMARY = Internal.createUniqueKey(Doctor.DOCTOR, "KEY_Doctor_PRIMARY", Doctor.DOCTOR.DOCTOR_ID);
    }
}
