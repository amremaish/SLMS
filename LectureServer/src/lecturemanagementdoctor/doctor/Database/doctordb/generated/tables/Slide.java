/*
 * This file is generated by jOOQ.
 */
package lecturemanagementdoctor.doctor.Database.doctordb.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lecturemanagementdoctor.doctor.Database.doctordb.generated.Indexes;
import lecturemanagementdoctor.doctor.Database.doctordb.generated.Keys;
import lecturemanagementdoctor.doctor.Database.doctordb.generated.Lecturedb;
import lecturemanagementdoctor.doctor.Database.doctordb.generated.tables.records.SlideRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Slide extends TableImpl<SlideRecord> {

    private static final long serialVersionUID = -184077640;

    /**
     * The reference instance of <code>lecturedb.Slide</code>
     */
    public static final Slide SLIDE = new Slide();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlideRecord> getRecordType() {
        return SlideRecord.class;
    }

    /**
     * The column <code>lecturedb.Slide.slide_id</code>.
     */
    public final TableField<SlideRecord, Integer> SLIDE_ID = createField("slide_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>lecturedb.Slide.slide_path</code>.
     */
    public final TableField<SlideRecord, String> SLIDE_PATH = createField("slide_path", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lecturedb.Slide.lecture_id</code>.
     */
    public final TableField<SlideRecord, Integer> LECTURE_ID = createField("lecture_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>lecturedb.Slide</code> table reference
     */
    public Slide() {
        this(DSL.name("Slide"), null);
    }

    /**
     * Create an aliased <code>lecturedb.Slide</code> table reference
     */
    public Slide(String alias) {
        this(DSL.name(alias), SLIDE);
    }

    /**
     * Create an aliased <code>lecturedb.Slide</code> table reference
     */
    public Slide(Name alias) {
        this(alias, SLIDE);
    }

    private Slide(Name alias, Table<SlideRecord> aliased) {
        this(alias, aliased, null);
    }

    private Slide(Name alias, Table<SlideRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lecturedb.LECTUREDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SLIDE_PRIMARY, Indexes.SLIDE_SLIDE_FK0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SlideRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SLIDE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SlideRecord> getPrimaryKey() {
        return Keys.KEY_SLIDE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SlideRecord>> getKeys() {
        return Arrays.<UniqueKey<SlideRecord>>asList(Keys.KEY_SLIDE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SlideRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SlideRecord, ?>>asList(Keys.SLIDE_FK0);
    }

    public Lecture lecture() {
        return new Lecture(this, Keys.SLIDE_FK0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Slide as(String alias) {
        return new Slide(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Slide as(Name alias) {
        return new Slide(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Slide rename(String name) {
        return new Slide(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Slide rename(Name name) {
        return new Slide(name, null);
    }
}
