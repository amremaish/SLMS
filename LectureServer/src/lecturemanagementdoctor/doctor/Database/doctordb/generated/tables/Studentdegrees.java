/*
 * This file is generated by jOOQ.
 */
package lecturemanagementdoctor.doctor.Database.doctordb.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lecturemanagementdoctor.doctor.Database.doctordb.generated.Indexes;
import lecturemanagementdoctor.doctor.Database.doctordb.generated.Keys;
import lecturemanagementdoctor.doctor.Database.doctordb.generated.Lecturedb;
import lecturemanagementdoctor.doctor.Database.doctordb.generated.tables.records.StudentdegreesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Studentdegrees extends TableImpl<StudentdegreesRecord> {

    private static final long serialVersionUID = 1111486680;

    /**
     * The reference instance of <code>lecturedb.StudentDegrees</code>
     */
    public static final Studentdegrees STUDENTDEGREES = new Studentdegrees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentdegreesRecord> getRecordType() {
        return StudentdegreesRecord.class;
    }

    /**
     * The column <code>lecturedb.StudentDegrees.student_id</code>.
     */
    public final TableField<StudentdegreesRecord, Integer> STUDENT_ID = createField("student_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lecturedb.StudentDegrees.quiz_id</code>.
     */
    public final TableField<StudentdegreesRecord, Integer> QUIZ_ID = createField("quiz_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lecturedb.StudentDegrees.degree</code>.
     */
    public final TableField<StudentdegreesRecord, Integer> DEGREE = createField("degree", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lecturedb.StudentDegrees.totaldegree</code>.
     */
    public final TableField<StudentdegreesRecord, Integer> TOTALDEGREE = createField("total_degree", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>lecturedb.StudentDegrees</code> table reference
     */
    public Studentdegrees() {
        this(DSL.name("StudentDegrees"), null);
    }

    /**
     * Create an aliased <code>lecturedb.StudentDegrees</code> table reference
     */
    public Studentdegrees(String alias) {
        this(DSL.name(alias), STUDENTDEGREES);
    }

    /**
     * Create an aliased <code>lecturedb.StudentDegrees</code> table reference
     */
    public Studentdegrees(Name alias) {
        this(alias, STUDENTDEGREES);
    }

    private Studentdegrees(Name alias, Table<StudentdegreesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Studentdegrees(Name alias, Table<StudentdegreesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lecturedb.LECTUREDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STUDENTDEGREES_STUDENTDEGREES_FK0, Indexes.STUDENTDEGREES_STUDENTDEGREES_FK1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StudentdegreesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StudentdegreesRecord, ?>>asList(Keys.STUDENTDEGREES_FK0, Keys.STUDENTDEGREES_FK1);
    }

    public Student student() {
        return new Student(this, Keys.STUDENTDEGREES_FK0);
    }

    public Quiz quiz() {
        return new Quiz(this, Keys.STUDENTDEGREES_FK1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Studentdegrees as(String alias) {
        return new Studentdegrees(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Studentdegrees as(Name alias) {
        return new Studentdegrees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Studentdegrees rename(String name) {
        return new Studentdegrees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Studentdegrees rename(Name name) {
        return new Studentdegrees(name, null);
    }
}
