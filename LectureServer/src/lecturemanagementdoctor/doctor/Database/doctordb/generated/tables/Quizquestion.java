/*
 * This file is generated by jOOQ.
 */
package lecturemanagementdoctor.doctor.Database.doctordb.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lecturemanagementdoctor.doctor.Database.doctordb.generated.Indexes;
import lecturemanagementdoctor.doctor.Database.doctordb.generated.Keys;
import lecturemanagementdoctor.doctor.Database.doctordb.generated.Lecturedb;
import lecturemanagementdoctor.doctor.Database.doctordb.generated.tables.records.QuizquestionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quizquestion extends TableImpl<QuizquestionRecord> {

    private static final long serialVersionUID = 127165669;

    /**
     * The reference instance of <code>lecturedb.QuizQuestion</code>
     */
    public static final Quizquestion QUIZQUESTION = new Quizquestion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizquestionRecord> getRecordType() {
        return QuizquestionRecord.class;
    }

    /**
     * The column <code>lecturedb.QuizQuestion.question_id</code>.
     */
    public final TableField<QuizquestionRecord, Integer> QUESTION_ID = createField("question_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>lecturedb.QuizQuestion.numberofchoices</code>.
     */
    public final TableField<QuizquestionRecord, Integer> NUMBEROFCHOICES = createField("numberofchoices", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lecturedb.QuizQuestion.question_data</code>.
     */
    public final TableField<QuizquestionRecord, String> QUESTION_DATA = createField("question_data", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lecturedb.QuizQuestion.right_answer</code>.
     */
    public final TableField<QuizquestionRecord, Integer> RIGHT_ANSWER = createField("right_answer", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lecturedb.QuizQuestion.quiz_id</code>.
     */
    public final TableField<QuizquestionRecord, Integer> QUIZ_ID = createField("quiz_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>lecturedb.QuizQuestion</code> table reference
     */
    public Quizquestion() {
        this(DSL.name("QuizQuestion"), null);
    }

    /**
     * Create an aliased <code>lecturedb.QuizQuestion</code> table reference
     */
    public Quizquestion(String alias) {
        this(DSL.name(alias), QUIZQUESTION);
    }

    /**
     * Create an aliased <code>lecturedb.QuizQuestion</code> table reference
     */
    public Quizquestion(Name alias) {
        this(alias, QUIZQUESTION);
    }

    private Quizquestion(Name alias, Table<QuizquestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quizquestion(Name alias, Table<QuizquestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Quizquestion(Table<O> child, ForeignKey<O, QuizquestionRecord> key) {
        super(child, key, QUIZQUESTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lecturedb.LECTUREDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUIZQUESTION_PRIMARY, Indexes.QUIZQUESTION_QUIZQUESTION_FK0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QuizquestionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUIZQUESTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuizquestionRecord> getPrimaryKey() {
        return Keys.KEY_QUIZQUESTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuizquestionRecord>> getKeys() {
        return Arrays.<UniqueKey<QuizquestionRecord>>asList(Keys.KEY_QUIZQUESTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QuizquestionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuizquestionRecord, ?>>asList(Keys.QUIZQUESTION_FK0);
    }

    public Quiz quiz() {
        return new Quiz(this, Keys.QUIZQUESTION_FK0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Quizquestion as(String alias) {
        return new Quizquestion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Quizquestion as(Name alias) {
        return new Quizquestion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quizquestion rename(String name) {
        return new Quizquestion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quizquestion rename(Name name) {
        return new Quizquestion(name, null);
    }
}
